{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red19\green118\blue70;\red35\green22\blue178;\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c3529\c52549\c34510;\cssrgb\c18824\c18824\c75294;\cssrgb\c63922\c8235\c8235;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
import\cf4  machine\cb1 \
\cf2 \cb3 from\cf4  machine \cf2 import\cf4  Pin , I2C\cb1 \
\cf2 \cb3 from\cf4  lcd_api \cf2 import\cf4  LcdApi\cb1 \
\cf2 \cb3 from\cf4  pico_i2c_lcd \cf2 import\cf4  I2cLcd\cb1 \
\cf2 \cb3 import\cf4  time\cb1 \
\cf2 \cb3 import\cf4  utime\cb1 \
\cb3 ledrouge = Pin(\cf5 2\cf4 ,Pin.OUT)\cb1 \
\cb3 ledvert = Pin(\cf5 3\cf4 ,Pin.OUT)\cb1 \
\cb3 relais = Pin(\cf5 12\cf4 ,Pin.OUT)\cb1 \
\cb3 addressi2c = \cf6 0x27\cf4 \cb1 \
\cb3 rows = \cf5 2\cf4 \cb1 \
\cb3 columns = \cf5 16\cf4 \cb1 \
\cb3 i2c = I2C(\cf5 0\cf4 ,sda=machine.Pin(\cf5 0\cf4 ),scl= machine.Pin(\cf5 1\cf4 ),freq= \cf5 400000\cf4 )\cb1 \
\cb3 lcd = I2cLcd(i2c, addressi2c,rows,columns)\cb1 \
\cb3 matrix_keys = [[\cf7 '1'\cf4 , \cf7 '2'\cf4 , \cf7 '3'\cf4 , \cf7 'A'\cf4 ],\cb1 \
\cb3                [\cf7 '4'\cf4 , \cf7 '5'\cf4 , \cf7 '6'\cf4 , \cf7 'B'\cf4 ],\cb1 \
\cb3                [\cf7 '7'\cf4 , \cf7 '8'\cf4 , \cf7 '9'\cf4 , \cf7 'C'\cf4 ],\cb1 \
\cb3                [\cf7 '*'\cf4 , \cf7 '0'\cf4 , \cf7 '#'\cf4 , \cf7 'D'\cf4 ]]\cb1 \
\cb3 keypad_rows = [\cf5 16\cf4 ,\cf5 17\cf4 ,\cf5 18\cf4 ,\cf5 19\cf4 ]\cb1 \
\cb3 keypad_columns = [\cf5 20\cf4 ,\cf5 21\cf4 ,\cf5 22\cf4 ,\cf5 26\cf4 ]\cb1 \
\cb3 col_pins = []\cb1 \
\cb3 row_pins = []\cb1 \
\cb3 secret_pin = [\cf7 '2'\cf4 ,\cf7 '2'\cf4 ,\cf7 '3'\cf4 ,\cf7 '4'\cf4 ,\cf7 '5'\cf4 ,\cf7 '5'\cf4 ]\cb1 \
\cb3 guess = []\cb1 \
\cf2 \cb3 for\cf4  x \cf2 in\cf4  \cf2 range\cf4 (\cf5 0\cf4 ,\cf5 4\cf4 ):\cb1 \
\cb3     row_pins.append(Pin(keypad_rows[x], Pin.OUT))\cb1 \
\cb3     row_pins[x].value(\cf5 1\cf4 )\cb1 \
\cb3     col_pins.append(Pin(keypad_columns[x], Pin.IN, Pin.PULL_DOWN))\cb1 \
\cb3     col_pins[x].value(\cf5 0\cf4 )\cb1 \
\cb3     \cb1 \
\cb3     \cb1 \
\cf2 \cb3 print\cf4 (\cf7 "Please enter a key from the keypad"\cf4 )\cb1 \
\cb3     \cb1 \
\cf2 \cb3 def\cf4  scankeys():\cb1 \
\cb3     lcd.move_to(\cf5 0\cf4 ,\cf5 0\cf4 )\cb1 \
\cb3     lcd.putstr(\cf7 "password :"\cf4  )\cb1 \
\cb3     \cf2 for\cf4  row \cf2 in\cf4  \cf2 range\cf4 (\cf5 4\cf4 ):\cb1 \
\cb3         \cf2 for\cf4  col \cf2 in\cf4  \cf2 range\cf4 (\cf5 4\cf4 ):\cb1 \
\cb3             row_pins[row].high()\cb1 \
\cb3             key = \cf2 None\cf4 \cb1 \
\cb3             \cb1 \
\cb3             \cf2 if\cf4  col_pins[col].value() == \cf5 1\cf4 :\cb1 \
\cb3                 \cf2 print\cf4 (\cf7 "You have pressed:"\cf4 , matrix_keys[row][col])\cb1 \
\cb3                 key_press = matrix_keys[row][col]\cb1 \
\cb3                 utime.sleep(\cf5 0.1\cf4 )\cb1 \
\cb3                 guess.append(key_press)\cb1 \
\cb3             \cf2 for\cf4  i \cf2 in\cf4  \cf2 range\cf4 (\cf2 len\cf4 (guess)):\cb1 \
\cb3                 lcd.move_to(i,\cf5 1\cf4 )\cb1 \
\cb3                 lcd.putstr(guess[i])\cb1 \
\cb3                 \cb1 \
\cb3             \cf2 if\cf4  \cf2 len\cf4 (guess) == \cf5 6\cf4 :\cb1 \
\cb3                 checkPin(guess)\cb1 \
\cb3                 \cb1 \
\cb3                 \cf2 for\cf4  x \cf2 in\cf4  \cf2 range\cf4 (\cf5 0\cf4 ,\cf5 6\cf4 ):\cb1 \
\cb3                     guess.pop()\cb1 \
\cb3                     \cb1 \
\cb3                     \cb1 \
\cb3         row_pins[row].low()\cb1 \
\cf2 \cb3 def\cf4  checkPin(guess):\cb1 \
\cb3              \cb1 \
\cb3     \cf2 if\cf4  guess == secret_pin:\cb1 \
\cb3         \cb1 \
\cb3         \cf2 print\cf4 (\cf7 "You got the secret pin correct"\cf4 )\cb1 \
\cb3         ledvert.value(\cf5 1\cf4 )\cb1 \
\cb3         utime.sleep(\cf5 3\cf4 )\cb1 \
\cb3         ledvert.value(\cf5 0\cf4 )\cb1 \
\cb3         lcd.move_to(\cf5 1\cf4 ,\cf5 0\cf4 )\cb1 \
\cb3         lcd.putstr(\cf7 "correct"\cf4 )\cb1 \
\cb3         lcd.move_to(\cf5 0\cf4 ,\cf5 1\cf4 )\cb1 \
\cb3         lcd.putstr(\cf7 "password"\cf4 )\cb1 \
\cb3         time.sleep(\cf5 1\cf4 )\cb1 \
\cb3         lcd.clear()\cb1 \
\cb3         \cb1 \
\cb3     \cf2 else\cf4 :\cb1 \
\cb3         \cf2 print\cf4 (\cf7 "Better luck next time"\cf4 )\cb1 \
\cb3         lcd.clear()\cb1 \
\cb3         lcd.move_to(\cf5 1\cf4 ,\cf5 0\cf4 )\cb1 \
\cb3         lcd.putstr(\cf7 "incorrect"\cf4 )\cb1 \
\cb3         lcd.move_to(\cf5 1\cf4 ,\cf5 1\cf4 )\cb1 \
\cb3         lcd.putstr(\cf7 "password"\cf4 )\cb1 \
\cb3         time.sleep(\cf5 1\cf4 )\cb1 \
\cb3         lcd.clear()\cb1 \
\cb3      \cb1 \
\cb3             \cb1 \
\
\cf2 \cb3 while\cf4  \cf2 True\cf4  :\cb1 \
\cb3     scankeys()\cb1 \
\cb3     relais.value(\cf5 1\cf4 )\cb1 \
\cb3    \cb1 \
\cb3     \cb1 \
\cb3     \cb1 \
\
\
\
}